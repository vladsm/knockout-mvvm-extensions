// Knockout MVVM Extensions JavaScript library v0.1
// (c) 2011 Vladimir Smirnov (vladsm@gmail.com)
// License: MIT (http://www.opensource.org/licenses/mit-license.php)
// 
// jQuery and Knockout javascript libraries are required to be referenced.
(function(){if(typeof window.ko=="undefined")throw"Knockout Javascript framework is not found.";if(typeof window.ko.mvvm=="undefined")ko.mvvm={}})();if(typeof ko.mvvm.utils=="undefined")ko.mvvm.utils={};ko.utils.extend(ko.mvvm.utils,{defined:function(a){return typeof a!="undefined"},isFunction:function(a){return typeof a=="function"},emptyFunction:function(){},isArray:function(a){return a==null?false:Object.prototype.toString.call(a)=="[object Array]"}});(function(){ko.mvvm.Class={define:function(c,b){if(typeof b=="undefined"&&typeof c!="undefined"){b=c;c=null}if(typeof b=="undefined")b={};function a(){this.initialize.apply(this,arguments)}a.prototype.constructor=a;if(c){var e=function(){};e.prototype=c.prototype;a.prototype=new e;a.base=c.prototype}for(var d in b)a.prototype[d]=b[d];if(!a.prototype.initialize)a.prototype.initialize=function(){};return a},"abstract":function(){return a}};var b="Abstract method is not overridden.",a=function(){throw b;};a.hint=function(a){return function(){throw a||abstractExceptions;}}})();window.Class=ko.mvvm.Class;(function(a){ko.mvvm.enumerable={foreach:function(e,c,f){b(e);if(!a.isFunction(c))throw"Action is not a function";if(a.defined(f))c=c.bind(f);for(var d=0;d<e.length;++d)c(e[d],d)},where:function(e,c,d){b(e);if(!a.isFunction(c))throw"Predicate is not a function";if(a.defined(d))c=c.bind(d);var f=[];ko.mvvm.enumerable.foreach(e,function(a){c(a)&&f.push(a)});return f},first:function(d,e,c,f){var b;if(e!=null)b=ko.mvvm.enumerable.where(d,e,f);else b=d;if(b!=null&&b.length>0)return b[0];if(a.defined(c))return c;throw"Out of range";}};var c="Collection is null reference";function b(b){if(b==null)throw"Collection is null reference";if(!a.isArray(b))throw"Collection object is invalid";}})(ko.mvvm.utils);(function(a){var b="ko$mvvm$observables$dependentObservable";ko.utils.extend(Function.prototype,{asDependentObservable:function(d){if(!a.isFunction(this))throw"asDependentObservable marker is applicaple to functions only";this[b]={name:d,read:this,write:null};return c(this)},asDependentObservableWrite:function(d){if(!a.isFunction(this))throw"asDependentObservableWrite marker is applicaple to functions only";this[b]={name:d,read:null,write:this};return c(this)}});function c(a){a.extend=function(c){a[b].extendProps=c;return a};return a}if(!a.defined(ko.mvvm.observables))ko.mvvm.observables={};ko.mvvm.observables.registerDependents=function(e){var d={},c;for(var j in e){var k=e[j];if(!a.isFunction(k))continue;c=k[b];if(!a.defined(c))continue;if(c.name==null)c.name=j;var i=d[c.name];if(i==null)d[c.name]=c;else for(var h in c)if(c[h]!=null)i[h]=c[h]}for(var g in d){c=d[g];if(c.read==null)throw"Dependent observable '"+g+"' is incorrectly defined.";var f=ko.dependentObservable({read:c.read,write:c.write,owner:e});if(c.extendProps)f=f.extend(c.extendProps);e[g]=f}}})(ko.mvvm.utils);ko.mvvm.binding={register:function(c,b){var a=new b;ko.bindingHandlers[c]=a}};ko.mvvm.binding.BaseBinding=Class.define({initialize:function(){this.init=this.initBinding.bind(this);this.update=this.updateBinding.bind(this)},initBinding:function(){},updateBinding:function(){},unwrap:function(a){return a==null?null:ko.utils.unwrapObservable(a)}});ko.mvvm.binding.BindingWrap=Class.define(ko.mvvm.binding.BaseBinding,{initialize:function(a){ko.mvvm.binding.BindingWrap.base.initialize.call(this);this.bindingHandler=ko.bindingHandlers[a]},initBinding:function(d,b,a,c){this.bindingHandler.init&&this.bindingHandler.init(d,b,a,c)},updateBinding:function(d,b,a,c){this.bindingHandler.update&&this.bindingHandler.update(d,b,a,c)}})